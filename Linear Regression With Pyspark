### Handling Categorical Features
from pyspark.ml.feature import StringIndexer

indexer=StringIndexer(inputCols=["smoker","day","time"],outputCols=["smoker_indexed","day_indexed",
                                                                  "time_index"])
df_r=indexer.fit(df_r).transform(df_r)
df_r.show()

from pyspark.ml.feature import VectorAssembler
featureassembler=VectorAssembler(inputCols=['tip','size','sex_indexed','smoker_indexed','day_indexed',
                          'time_index'],outputCol="Independent Features")
output=featureassembler.transform(df_r)


output.select('Independent Features').show()


finalized_data=output.select("Independent Features","total_bill")


from pyspark.ml.regression import LinearRegression
##train test split
train_data,test_data=finalized_data.randomSplit([0.75,0.25])
regressor=LinearRegression(featuresCol='Independent Features', labelCol='total_bill')
regressor=regressor.fit(train_data)


regressor.coefficients
regressor.intercept

### Predictions
pred_results=regressor.evaluate(test_data)

## Final comparison
pred_results.predictions.show()

### Performance Metrics
pred_results.r2,pred_results.meanAbsoluteError,pred_results.meanSquaredError
